package Interface;

// SE IMPORTAN LAS CLASES Y LIBRERIAS NECESARIAS.
import EDD.CAnt;
import EDD.Global;
import EDD.GrafoMA;
import javax.swing.JOptionPane;
import java.text.DecimalFormat;

/**
 * Esta clase representa la ventana en donde se ejecuta la simulación.
 * @author Nicolás Planas
 */
public class Simulation extends javax.swing.JFrame {
    private GrafoMA grafo = Global.getGrafo();
    private int[] shortestRoute;
    private double[][] pheromoneQuantity;

    /**
     *  Este es el constructor de la clase y no recibe parámetros.
     */
    public Simulation() {
        initComponents();
        this.setVisible(rootPaneCheckingEnabled);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.pheromoneQuantity = new double[grafo.getMaxVertex()][grafo.getMaxVertex()];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        pheromone_grade = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        visibility_grade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        r = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        s = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ants_amount = new javax.swing.JTextField();
        ACA = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        cycles_input = new javax.swing.JTextField();
        execute_simulation = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        simulation_result = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        evaporation_factor = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(825, 435));
        setPreferredSize(new java.awt.Dimension(825, 415));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Woodchuck", 0, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RESULTADO");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 340, 60));

        jSeparator1.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator1.setForeground(new java.awt.Color(51, 51, 51));
        jSeparator1.setAutoscrolls(true);
        jSeparator1.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 340, 30));

        jLabel3.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Importancia de la feromona  \"α\":");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 240, 40));

        pheromone_grade.setFont(new java.awt.Font("Aspekta", 0, 12)); // NOI18N
        pheromone_grade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pheromone_grade.setText("1");
        pheromone_grade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pheromone_gradeActionPerformed(evt);
            }
        });
        getContentPane().add(pheromone_grade, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, 40, 20));

        jLabel5.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Grado de visibilidad  \"β\":");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 210, 40));

        visibility_grade.setFont(new java.awt.Font("Aspekta", 0, 12)); // NOI18N
        visibility_grade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        visibility_grade.setText("2");
        visibility_grade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibility_gradeActionPerformed(evt);
            }
        });
        getContentPane().add(visibility_grade, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 40, 20));

        jLabel6.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Ciudad de partida \"nido\":");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 210, 40));

        r.setFont(new java.awt.Font("Aspekta", 0, 12)); // NOI18N
        r.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        r.setText("0");
        r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rActionPerformed(evt);
            }
        });
        getContentPane().add(r, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, 40, 20));

        jLabel7.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Ciudad de  llegada \"comida\":");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 250, 40));

        s.setFont(new java.awt.Font("Aspekta", 1, 12)); // NOI18N
        s.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        s.setText("0");
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });
        getContentPane().add(s, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, 40, 20));

        jLabel8.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Cantidad de hormigas:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 170, 40));

        ants_amount.setFont(new java.awt.Font("Aspekta", 0, 12)); // NOI18N
        ants_amount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ants_amount.setText("0");
        ants_amount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ants_amountActionPerformed(evt);
            }
        });
        getContentPane().add(ants_amount, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 40, 20));

        ACA.setFont(new java.awt.Font("Aspekta", 1, 14)); // NOI18N
        ACA.setForeground(new java.awt.Color(51, 51, 51));
        ACA.setText("VOLVER");
        ACA.setDefaultCapable(false);
        ACA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACAActionPerformed(evt);
            }
        });
        getContentPane().add(ACA, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 90, 40));

        jSeparator2.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator2.setForeground(new java.awt.Color(51, 51, 51));
        jSeparator2.setAutoscrolls(true);
        jSeparator2.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 340, 30));

        jLabel9.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Número de ciclos:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 150, 40));

        cycles_input.setFont(new java.awt.Font("Aspekta", 1, 12)); // NOI18N
        cycles_input.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cycles_input.setText("0");
        cycles_input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cycles_inputActionPerformed(evt);
            }
        });
        getContentPane().add(cycles_input, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 280, 40, 20));

        execute_simulation.setFont(new java.awt.Font("Aspekta", 1, 14)); // NOI18N
        execute_simulation.setForeground(new java.awt.Color(51, 51, 51));
        execute_simulation.setText("SIMULAR");
        execute_simulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execute_simulationActionPerformed(evt);
            }
        });
        getContentPane().add(execute_simulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 340, 100, 40));

        jButton1.setFont(new java.awt.Font("Woodchuck", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 10, 30, 30));

        simulation_result.setColumns(20);
        simulation_result.setFont(new java.awt.Font("Aspekta", 1, 12)); // NOI18N
        simulation_result.setRows(5);
        jScrollPane1.setViewportView(simulation_result);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 380, 240));

        jLabel4.setFont(new java.awt.Font("Woodchuck", 0, 28)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("CREADOR DE HORMIGAS");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 390, 60));

        jLabel13.setIcon(new javax.swing.ImageIcon("/Users/nicolasplanas/Desktop/Images/ant_trail_2.png")); // NOI18N
        jLabel13.setPreferredSize(new java.awt.Dimension(100, 200));
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, -10, 100, 160));

        jLabel10.setFont(new java.awt.Font("Aspekta", 2, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Factor de evaporación \"ρ\":");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 230, 40));

        evaporation_factor.setFont(new java.awt.Font("Aspekta", 0, 12)); // NOI18N
        evaporation_factor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        evaporation_factor.setText("0.5");
        evaporation_factor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaporation_factorActionPerformed(evt);
            }
        });
        getContentPane().add(evaporation_factor, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 40, 20));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -20, -1, -1));

        jLabel15.setIcon(new javax.swing.ImageIcon("/Users/nicolasplanas/Desktop/Images/ant_trail_2.png")); // NOI18N
        jLabel15.setPreferredSize(new java.awt.Dimension(100, 200));
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 270, 100, 160));

        jLabel12.setIcon(new javax.swing.ImageIcon("/Users/nicolasplanas/Desktop/Images/background.png")); // NOI18N
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, -80, -1, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon("/Users/nicolasplanas/Desktop/Images/background.png")); // NOI18N
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, -100, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pheromone_gradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pheromone_gradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pheromone_gradeActionPerformed

    private void visibility_gradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibility_gradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_visibility_gradeActionPerformed

    private void rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rActionPerformed

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sActionPerformed

    private void ants_amountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ants_amountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ants_amountActionPerformed

    private void ACAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACAActionPerformed
        this.setVisible(false);
        Homescreen v1 = new Homescreen();
        v1.setArray(shortestRoute);
        v1.setVisible(true);
    }//GEN-LAST:event_ACAActionPerformed

    private void cycles_inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cycles_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cycles_inputActionPerformed

    private void execute_simulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execute_simulationActionPerformed
        if ("".equals(r.getText()) || "".equals(s.getText())) {
            JOptionPane.showMessageDialog(null, "¡Tienes que llenar ambos parámetros de las ciudades!");
        } else {
            try {
                if (Integer.parseInt(r.getText()) <= 0 || Integer.parseInt(r.getText()) > grafo.getNumVertex()) {
                    JOptionPane.showMessageDialog(null, "¡No existe la ciudad '" + r.getText() + "'!");
                } else if (Integer.parseInt(s.getText()) <= 0 || Integer.parseInt(s.getText()) > grafo.getNumVertex()) {
                    JOptionPane.showMessageDialog(null, "¡No existe la ciudad '" + s.getText() + "'!");
                } else {
                    
                    // VARIABLE STRING PARA EL ÁREA DE TEXTO.
                    String result = "";
                    
                    // RECORRIDO MÁS OPTIMO.
                    String optimalPath = "";

                    // DISTANCIA MÁS CORTA DE TODOS LOS RECORRIDOS.
                    double shortestDistance = 0;

                    // CANTIDAD DE CIUDADES DE LA SIMULACIÓN.
                    double m = grafo.getNumVertex();

                    // CANTIDAD DE FEROMONA INICIAL PARA LAS ARISTAS.
                    double ti = 1/m;

                    // CONTADOR DE CICLOS.
                    int cont_c = 0;
                    
                    // CANTIDAD DE HORMIGAS PARA LA SIMULACIÓN.
                    int antsAmount;
                    
                    // CANTIDAD DE CICLOS DE LA SIMULACIÓN.
                    int cycles;
                    
                    // OBJETO NOS PERMITE REDONDEAR LOS DECIMALES.
                    DecimalFormat dFormatter = new DecimalFormat("0.0");
                    
                    try {
                        // VALIDAMOS EL INPUT DE LA CANTIDAD DE CICLOS.
                        if (Integer.parseInt(cycles_input.getText()) <= 0) {
                            JOptionPane.showMessageDialog(null, "¡La cantidad de ciclos tiene que ser mayor a cero!");
                        } else {
                            cycles = Integer.parseInt(cycles_input.getText());

                            // ITERAMOS LA MATRIZ AUXILIAR Y LE INSERTAMOS EL VALOR INCIAL DE FEROMONA EN TODAS SUS POSICIONES.
                            for (int i = 0; i < grafo.getMaxVertex(); i++) {
                                for (int j = 0; j < grafo.getMaxVertex(); j++) {
                                    pheromoneQuantity[i][j] = ti;
                                }
                            }

                            // VALIDAMOS EL INPUT DE LA CANTIDAD DE HORMIGAS
                            if ("".equals(ants_amount.getText()) || Integer.parseInt(ants_amount.getText()) <= 0) {
                                JOptionPane.showMessageDialog(null, "¡Número de hormigas inválido!");
                            } else {
                                antsAmount = Integer.parseInt(ants_amount.getText());

                            while (cont_c < cycles) {

                                // ESTA VARIABLE REPRESENTA LA SUMATORIA DE "Q/L" PARA TODAS LAS HORMIGAS.
                                double delta_t = 0;

                                int cont = 0;
                                result += "CICLO #" + (cont_c + 1) + ":\n\n";

                                while (cont < antsAmount) {
                                    double currentDistance = 0;
                                    CAnt hormiga = new CAnt(grafo, Integer.parseInt(r.getText()), Integer.parseInt(s.getText()));
                                    hormiga.setΑ(Double.parseDouble(pheromone_grade.getText()));
                                    hormiga.setΒ(Double.parseDouble(visibility_grade.getText()));

                                    // SE DESPLAZA LA HORMIGA EN BASE A LA FÓRMULA DE PROBABILIDAD.
                                    while (hormiga.getR() != hormiga.getSf() && hormiga.getTrapped() == false) {
                                        hormiga.movementProbability(grafo, pheromoneQuantity);
                                    }

                                    // SE ACTUALIZAN LAS FEROMONA DENTRO DE LA MATRIZ AUXILIAR.
                                    for (int i = 0; i < hormiga.getMovementHistory().length && hormiga.getMovementHistory()[i + 1] != 0; i++) {
                                        int x = hormiga.getMovementHistory()[i] - 1;
                                        int y = hormiga.getMovementHistory()[i + 1] - 1;
                                        double tk = 1/grafo.getMatrixA()[x][y];

                                        currentDistance += grafo.getMatrixA()[x][y];

                                        // ACTUALIZACIÓN POR INCREMENTO.
                                        if (cont_c == 0) {
                                            pheromoneQuantity[x][y] += tk;
                                        // ACTUALIZACIÓN POR EVAPORACIÓN.
                                        } else {
                                            double t_1 = pheromoneQuantity[x][y] - 1/grafo.getMatrixA()[x][y];
                                            double ρ = Double.parseDouble(evaporation_factor.getText());
                                            pheromoneQuantity[x][y] += evaporationUpdate(ρ, t_1, delta_t);
                                        }
                                    }

                                    delta_t += 1/currentDistance;

                                    // EVALUAMOS LA DISTANCIA MÁS CORTA.
                                    if (shortestDistance == 0 || currentDistance < shortestDistance) {
                                        shortestDistance = currentDistance;
                                        optimalPath = printPath(hormiga);
                                        shortestRoute = hormiga.getMovementHistory();
                                    }
                                    
                                    result += "HORMIGA #" + (cont + 1) + ":\n" + "DISTANCIA RECORRIDA: " + dFormatter.format(currentDistance) + "\n" + "Recorrido: " + printPath(hormiga) + "\n\n";
                                    cont ++;
                                }
                                cont_c ++;
                            }
                            result += "====================\n\nRECORRIDO MÁS OPTIMO DE LA SIMULACIÓN: " + optimalPath + "\nDISTANCIA: " + dFormatter.format(shortestDistance);
                            simulation_result.setText(result);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "¡Haz ingresado algún valor inválido!");
                    } 
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "¡Ingrese un valor válido para la ciudad!");
            }
        }
    }//GEN-LAST:event_execute_simulationActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void evaporation_factorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaporation_factorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evaporation_factorActionPerformed
    
    /**
     * Este método imprime el recorrido de la hormiga.
     * @param ant Hormiga cuyo recorrido se desea imprimir.
     * @return 'String' del recorrido de la hormiga en un formato tipo lista.
     */
    private String printPath(CAnt ant) {
        String path = "";
        
        for (int i = 0; i < ant.getMovementHistory().length && ant.getMovementHistory()[i] != 0; i++) {
            if (i == 0) {
                path += "[";
            }
            if (ant.getMovementHistory()[i] != 0) {
                path += Integer.toString(ant.getMovementHistory()[i]);
            }
            if (i < ant.getMovementHistory().length - 1 && ant.getMovementHistory()[i + 1] != 0) {
                path += ",";
            }
            else {
                path += "]";
                break;
            }
        }
    return path;
    }
    
    /**
     * Este método retorna el valor actualizado de la feromona al culminar un ciclo.
     * @param p factor de evaporación que se utilizara para la simulación.
     * @param t cantidad de feromona que había por ese camino en el ciclo anterior.
     * @param d_t sumatoria de la feromona proporcionada por todas las hormigas que han recorrido ese camino.
     * @return 'double' el cual representa el valor de la feromona tras la evaporación.
     */
    private double evaporationUpdate(double p, double t, double d_t) {
        return (1 - p) * t + d_t;
    }

    /**
     * Este método inicializa la ventana.
     * @param args 
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ACA;
    private javax.swing.JTextField ants_amount;
    private javax.swing.JTextField cycles_input;
    private javax.swing.JTextField evaporation_factor;
    private javax.swing.JButton execute_simulation;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField pheromone_grade;
    private javax.swing.JTextField r;
    private javax.swing.JTextField s;
    private javax.swing.JTextArea simulation_result;
    private javax.swing.JTextField visibility_grade;
    // End of variables declaration//GEN-END:variables
}
